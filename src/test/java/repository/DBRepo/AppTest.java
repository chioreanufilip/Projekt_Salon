package repository.DBRepo;
//import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import Exceptions.BussinessLogicException;
import Exceptions.EntityNotFoundException;
import ServiceSalon.ServiceSalon;
import org.junit.jupiter.api.*;
import org.mockito.*;
import Module.*;
import org.springframework.boot.test.context.SpringBootTest;
//import org.springframework.tran
import repository.Repository;
//import S

//@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class AppTest {
//    private BarberDBRepo barberDBRepo;
    String DBUrl ="jdbc:sqlserver://Romana_mobile;Database=BarberShop;trustServerCertificate=true;user=barbershop;password=12345;";
    Repository<Barber> repoBarb =new BarberDBRepo(DBUrl);
    Repository<Pedicurist> repoPedi = new PedicuristDBRepo(DBUrl);
    Repository<NailPainter> repoNail = new NailPainterDBRepo(DBUrl);
    Repository<Produce> repoProduce = new ProductDBRepo(DBUrl);
    Repository<Client> repoClient = new ClientDBRepo(DBUrl);
    Repository<Review> repoReview = new ReviewDBRepo(DBUrl);
    Repository<Service> repoService = new ServiceDBRepo(DBUrl);
    Repository<Payment> repoPayment = new PaymentDBRepo(DBUrl);
    Repository<Appointment> repoAppointment = new AppointmentDBRepo(DBUrl);

    @Test
    @Order(1)
    public void createTest(){
        Barber m = new Barber("Yunus","Fade",3,"fade",5000);
        Barber n = new Barber("Yunus","Fade",3,"fade",4000);
        Pedicurist m1 = new Pedicurist("Bula",5,"apa","Matrix",1000);
        Pedicurist n1 = new Pedicurist("Bula",5,"apa","Matrix",2000);
        NailPainter m2 = new NailPainter("Hrusca",5,"apa","Matrix",1000);
        NailPainter n2 = new NailPainter("Hrusca",5,"apa","Matrix",2000);
        Produce m3 = new Produce("Shaorma",12.35,3,1,1000);
        Produce n3 = new Produce("Shaorma",12.35,3,1,2000);
        Client m4 = new Client(1000,"Viorel","0757");
        Client n4 = new Client(2000,"Viorel","0757");
        Review m5 = new Review(1000,1,"haha",1000);
        Review n5 = new Review(2000,1,"haha",2000);
        List<Employee> list=new ArrayList<>();
        List<Employee> list1=new ArrayList<>();
        list.add(m);
        list.add(m1);
        list1.add(m2);
        list1.add(n);
        Service m6 = new Service(1000,"Shaorma","10 Min",65,list);
        Service n6 = new Service(2000,"Shaorma","10 Min",65,list1);
        List<Service> list2=new ArrayList<>();
        list2.add(m6);
        list2.add(n6);
        List<Produce> list3=new ArrayList<>();
        list3.add(m3);
        list3.add(n3);
        Payment m7 = new Payment(1000,list2,list3,1000);
        Payment n7 = new Payment(2000,list2,list3,1000);
        Appointment m8 = new Appointment(1000,"2025-12-12-12",m4,list2,m7);
        Appointment n8 = new Appointment(2000,"2026-12-12-12",n4,list2,n7);
        repoBarb.create(m);
        repoBarb.create(n);
        repoPedi.create(m1);
        repoPedi.create(n1);
        repoNail.create(m2);
        repoNail.create(n2);
        repoProduce.create(m3);
        repoProduce.create(n3);
        repoClient.create(m4);
        repoClient.create(n4);
        repoReview.create(m5);
        repoReview.create(n5);
        repoService.create(m6);
        repoService.create(n6);
        repoPayment.create(m7);
        repoPayment.create(n7);
        repoAppointment.create(m8);
        repoAppointment.create(n8);
        assertEquals("Yunus",repoBarb.getById(5000).getName());
        assertEquals("Bula",repoPedi.getById(1000).getName());
        assertEquals("Hrusca",repoNail.getById(1000).getName());
        assertEquals("Shaorma",repoProduce.getById(1000).getName());
        assertEquals("Viorel",repoClient.getById(1000).getName());
        assertEquals(1,repoReview.getById(1000).getRating());
        assertEquals("Shaorma",repoService.getById(1000).getName());
        assertEquals(2,repoPayment.getById(1000).getProducts().size());
        assertEquals("2025-12-12-12",repoAppointment.getById(1000).getDateTime());
    }

    @Test
    @Order(2)
    public void updateTest(){
        Barber m = new Barber("Yunus","Fade",3,"fade",5000);
        Barber n = new Barber("Yunus","Fade",3,"fade",4000);
        Pedicurist m1 = new Pedicurist("Bula",5,"apa","Matrix",1000);
        Pedicurist n1 = new Pedicurist("Bula",5,"apa","Matrix",2000);
        NailPainter m2 = new NailPainter("Hrusca",5,"apa","Matrix",1000);
        NailPainter n2 = new NailPainter("Hrusca",5,"apa","Matrix",2000);
        Produce m3 = new Produce("Shaorma",12.35,3,1,1000);
        Produce n3 = new Produce("Shaorma",12.35,3,1,2000);
        Client m4 = new Client(1000,"Viorel","0757");
        Client n4 = new Client(2000,"Viorel","0757");
        Review m5 = new Review(1000,1,"haha",1000);
        Review n5 = new Review(2000,1,"haha",2000);
        List<Employee> list=new ArrayList<>();
        List<Employee> list1=new ArrayList<>();
        list.add(m);
        list.add(m1);
        list1.add(m2);
        list1.add(n);
        Service m6 = new Service(1000,"Shaorma","10 Min",65,list);
        Service n6 = new Service(2000,"Shaorma","10 Min",65,list1);
        List<Service> list2=new ArrayList<>();
        list2.add(m6);
        list2.add(n6);
        List<Produce> list3=new ArrayList<>();
        list3.add(m3);
        list3.add(n3);
        Payment m7 = new Payment(1000,list2,list3,1000);
        Payment n7 = new Payment(2000,list2,list3,1000);
        Appointment m8 = new Appointment(1000,"2025-12-12-12",m4,list2,m7);
        Appointment n8 = new Appointment(2000,"2026-12-12-12",n4,list2,n7);
        m.setExperience(4);
        m1.setExperience(3);
        m2.setExperience(3);
        m3.setStock(69);
        m4.setName("Ciob");
        m5.setRating(2);
        m6.setPrice(50);
        m7.setClientId(2000);
        m8.setDateTime("2025-12-12-13");
        repoBarb.update(m);
        repoPedi.update(m1);
        repoNail.update(m2);
        repoProduce.update(m3);
        repoClient.update(m4);
        repoReview.update(m5);
        repoService.update(m6);
        repoPayment.update(m7);
        repoAppointment.update(m8);
        assertEquals(4,repoBarb.getById(5000).getExperience());
        assertEquals(3,repoPedi.getById(1000).getExperience());
        assertEquals(3,repoNail.getById(1000).getExperience());
        assertEquals(69,repoProduce.getById(1000).getStock());
        assertEquals("Ciob",repoClient.getById(1000).getName());
        assertEquals(2,repoReview.getById(1000).getRating());
        assertEquals(50,repoService.getById(1000).getPrice());
        assertEquals(2000,repoPayment.getById(1000).getClientId());
        assertEquals("2025-12-12-13",repoAppointment.getById(1000).getDateTime());
    }
    @Test
    @Order(3)
    public void deleteTest(){
        Barber m = new Barber("Yunus","Fade",3,"fade",5000);
        Barber n = new Barber("Yunus","Fade",3,"fade",4000);
        Pedicurist m1 = new Pedicurist("Bula",5,"apa","Matrix",1000);
        Pedicurist n1 = new Pedicurist("Bula",5,"apa","Matrix",2000);
        NailPainter m2 = new NailPainter("Hrusca",5,"apa","Matrix",1000);
        NailPainter n2 = new NailPainter("Hrusca",5,"apa","Matrix",2000);
        Produce m3 = new Produce("Shaorma",12.35,3,1,1000);
        Produce n3 = new Produce("Shaorma",12.35,3,1,2000);
        Client m4 = new Client(1000,"Viorel","0757");
        Client n4 = new Client(2000,"Viorel","0757");
        Review m5 = new Review(1000,1,"haha",1000);
        Review n5 = new Review(2000,1,"haha",2000);
        List<Employee> list=new ArrayList<>();
        List<Employee> list1=new ArrayList<>();
        list.add(m);
        list.add(m1);
        list1.add(m2);
        list1.add(n);
        Service m6 = new Service(1000,"Shaorma","10 Min",65,list);
        Service n6 = new Service(2000,"Shaorma","10 Min",65,list1);
        List<Service> list2=new ArrayList<>();
        list2.add(m6);
        list2.add(n6);
        List<Produce> list3=new ArrayList<>();
        list3.add(m3);
        list3.add(n3);
        Payment m7 = new Payment(1000,list2,list3,2000);
        Payment n7 = new Payment(2000,list2,list3,1000);
        Appointment m8 = new Appointment(1000,"2025-12-12-12",m4,list2,m7);
        Appointment n8 = new Appointment(2000,"2026-12-12-12",n4,list2,n7);
//        repoBarb.delete(5000);
//        repoBarb.delete(6000);
        repoAppointment.delete(m8.getId());
        repoAppointment.delete(n8.getId());
        assertThrows(EntityNotFoundException.class,()->{repoAppointment.getById(m8.getId());});
        repoPayment.delete(n7.getId());
        repoPayment.delete(m7.getId());
        assertThrows(EntityNotFoundException.class,()->{repoPayment.getById(m7.getId());});
        repoService.delete(m6.getId());
        repoService.delete(n6.getId());
        assertThrows(EntityNotFoundException.class,()->{repoService.getById(m6.getId());});
        repoReview.delete(n5.getId());
        repoReview.delete(m5.getId());
        assertThrows(EntityNotFoundException.class,()->{repoReview.getById(m5.getId());});
        repoClient.delete(m4.getId());
        repoClient.delete(n4.getId());
        assertThrows(EntityNotFoundException.class,()->{repoClient.getById(m4.getId());});
        repoProduce.delete(m3.getId());
        repoProduce.delete(n3.getId());
        assertThrows(EntityNotFoundException.class,()->{repoProduce.getById(m3.getId());});
        repoNail.delete(m2.getId());
        repoNail.delete(n2.getId());
        assertThrows(EntityNotFoundException.class,()->{repoNail.getById(m2.getId());});
        repoPedi.delete(m1.getId());
        repoPedi.delete(n1.getId());
        assertThrows(EntityNotFoundException.class,()->{repoPedi.getById(m1.getId());});
        repoBarb.delete(m.getId());
        repoBarb.delete(n.getId());
        assertThrows(EntityNotFoundException.class,()->{repoBarb.getById(m.getId());});
    }
    @Test
//    @Transactional
    public void otherTest(){
        Barber m = new Barber("Yunus","Fade",3,"fade",5000);
        Barber n = new Barber("Yunus","Fade",3,"fade",4000);
        Pedicurist m1 = new Pedicurist("Bula",5,"apa","Matrix",1000);
        Pedicurist n1 = new Pedicurist("Bula",5,"apa","Matrix",2000);
        NailPainter m2 = new NailPainter("Hrusca",5,"apa","Matrix",1000);
        NailPainter n2 = new NailPainter("Hrusca",5,"apa","Matrix",2000);
        Produce m3 = new Produce("Shaorma",50.0,3,1,1000);
        Produce n3 = new Produce("Shaorma",50.0,3,1,2000);
        Client m4 = new Client(1000,"Viorel","0757");
        Client n4 = new Client(2000,"Viorel","0757");
        Review m5 = new Review(1000,1,"haha",1000);
        Review n5 = new Review(2000,1,"haha",2000);
        List<Employee> list=new ArrayList<>();
        List<Employee> list1=new ArrayList<>();
        list.add(m);
        list.add(m1);
        list1.add(m2);
        list1.add(n);
        Service m6 = new Service(1000,"Shaorma","10 Min",50,list);
        Service n6 = new Service(2000,"Shaorma","10 Min",50,list1);
        List<Service> list2=new ArrayList<>();
        list2.add(m6);
//        list2.add(n6);
        List<Produce> list3=new ArrayList<>();
        list3.add(m3);
        list3.add(n3);
        Payment m7 = new Payment(1000,list2,list3,1000);
        Payment n7 = new Payment(2000,list2,list3,1000);
        Appointment m8 = new Appointment(1000,"1900-12-15-12",m4,list2,m7);
        Appointment n8 = new Appointment(2000,"1900-12-14-12",m4,list2,n7);
        Appointment M8 = new Appointment(3000,"1900-12-13-12",m4,list2,m7);
        Appointment N8 = new Appointment(4000,"1900-12-12-12",m4,list2,n7);
        repoBarb.create(m);
        repoBarb.create(n);
        repoPedi.create(m1);
        repoPedi.create(n1);
        repoNail.create(m2);
        repoNail.create(n2);
        repoProduce.create(m3);
        repoProduce.create(n3);
        repoClient.create(m4);
        repoClient.create(n4);
        repoReview.create(m5);
        repoReview.create(n5);
        repoService.create(m6);
        repoService.create(n6);
        repoPayment.create(m7);
        repoPayment.create(n7);
        repoAppointment.create(m8);
        repoAppointment.create(n8);
        ServiceSalon serviceSalon=new ServiceSalon(repoBarb,repoNail,repoProduce,repoPedi,repoService,repoAppointment,repoPayment,repoReview,repoClient);

        assertThrows(BussinessLogicException.class,()->{serviceSalon.applyLoyaltyDiscount(1000,4000);});
        repoAppointment.create(M8);
        repoAppointment.create(N8);
        assertTrue(0.0<serviceSalon.getBonuses("1900-12"));
        serviceSalon.applyLoyaltyDiscount(1000,4000);
        assertEquals(repoAppointment.getById(4000).getPayment().getAmount(),75.0);
        assertThrows(BussinessLogicException.class,()->{serviceSalon.getBonuses("2026-12");});

        repoAppointment.delete(M8.getId());
        repoAppointment.delete(N8.getId());
        repoAppointment.delete(m8.getId());
        repoAppointment.delete(n8.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoAppointment.getById(m8.getId());});
        repoPayment.delete(n7.getId());
        repoPayment.delete(m7.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoPayment.getById(m7.getId());});
        repoService.delete(m6.getId());
        repoService.delete(n6.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoService.getById(m6.getId());});
        repoReview.delete(n5.getId());
        repoReview.delete(m5.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoReview.getById(m5.getId());});
        repoClient.delete(m4.getId());
        repoClient.delete(n4.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoClient.getById(m4.getId());});
        repoProduce.delete(m3.getId());
        repoProduce.delete(n3.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoProduce.getById(m3.getId());});
        repoNail.delete(m2.getId());
        repoNail.delete(n2.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoNail.getById(m2.getId());});
        repoPedi.delete(m1.getId());
        repoPedi.delete(n1.getId());
//        assertThrows(EntityNotFoundException.class,()->{repoPedi.getById(m1.getId());});
        repoBarb.delete(m.getId());
        repoBarb.delete(n.getId());
    }

}